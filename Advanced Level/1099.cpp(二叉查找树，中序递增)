#include<cstdio>
#include<algorithm>
#include<queue>
using namespace std;
int in[105];
int n;
struct node {
	int data;
	int lchild, rchild;
}Node[105];
int num = 0;
void inorder(int root) {   //递增的中序序列，按照中序遍历将Node赋值
	if (root == -1){
	  return;     
	  }//注意
	inorder(Node[root].lchild);
	Node[root].data = in[num++];
	inorder(Node[root].rchild);
}
void BFS(int root) {
	num = 0;
	queue<int> q;
	q.push(root);
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		num++;
		printf("%d", Node[now].data);
		if (num < n)printf(" ");
		if (Node[now].lchild != -1) {
			q.push(Node[now].lchild);
		}
		if(Node[now].rchild != -1){ //不是else if
			q.push(Node[now].rchild);
		}
	}
}
int main() {
	int l,r;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d%d", &l, &r);
		Node[i].lchild = l;
		Node[i].rchild = r;
	}
	for (int i = 0; i < n; i++) {
		scanf("%d", &in[i]);
	}
	sort(in, in + n);
	inorder(0);
	BFS(0);
	return 0;
}
