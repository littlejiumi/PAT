#include<cstdio>
#include<vector>
#include<cmath>
using namespace std;
struct node {
	int data;
	node* lchild;
	node* rchild;
};
int s[100];
node* insert(node* root, int x) {   //最后需要拿到根节点的建树过程，返回值
	if (root == NULL) {
		root = new node();
		root->data = x;
		root->lchild = root->rchild = NULL;
	}
	else if (abs(x) <= abs(root->data)) {
		root->lchild =insert(root->lchild, x);
	}
	else {
		root->rchild = insert(root->rchild, x);
	}
	return root;
}
bool judge1(node* root) { 
	if (root == NULL)return true;
	if (root->data < 0) {
		if (root->lchild != NULL && root->lchild->data < 0)return false;
		if (root->rchild != NULL && root->rchild->data < 0)return false;
	}
	return judge1(root->lchild) && judge1(root->rchild);
}
int getNum(node* root) {
	if (root == NULL)return 0;
	int l = getNum(root->lchild);
	int r = getNum(root->rchild);
	return root->data > 0 ? max(l, r) + 1 : max(l, r);
}
bool judge2(node* root) {
	if (root == NULL) {
		return true;
	}
	int l = getNum(root->lchild);
	int r = getNum(root->rchild);
	if (l != r)return false;
	return judge2(root->lchild) && judge2(root->rchild);
}
int main() {
	int n;
	scanf("%d", &n);
	for (int j = 0; j < n; j++) {
		int k;
		node* root = NULL;
		scanf("%d", &k);
		for (int i = 0; i < k; i++) {
			scanf("%d", &s[i]);
			root = insert(root, s[i]);
		}
		if (s[0] < 0 || judge1(root) == false || judge2(root) == false) {
			printf("No\n");
		}
		else {
			printf("Yes\n");
		}
	}
	return 0;
}

