#include<iostream>
#include<algorithm>
#include<unordered_map>
#include<vector>
using namespace std;
struct node {
	string str;
	int v;
};
bool cmp(node a, node b) {
	return a.v != b.v ? a.v > b.v : a.str < b.str; 
}
int main() {
	int n, m,num;
	string s;
	scanf("%d %d", &n, &m);
	vector<node> v(n);
	for (int i = 0; i < n; i++) {
		scanf("%s %d", &v[i].str, &v[i].v);
	}
	for (int j = 1; j <= m; j++) {
		scanf("%d %s", &num, &s);
		printf("Case %d: %d %s\n", j, num, s.c_str());
		vector<node> ans;
		int cnt = 0, sum = 0;
		if (num == 1) {
			for (int k = 0; k < n; k++) {
				if (v[k].str[0] == s[0])ans.push_back(v[k]);
			}
		}
		else if (num == 2) {
			for (int k = 0; k < n; k++) {
				if (v[k].str.substr(1, 3) == s) {
					cnt++;
					sum += v[k].v;
				}
			}
			if (cnt != 0)printf("%d %d\n", cnt, sum);
		}
		else if (num == 3) {
			unordered_map<string, int> m;
			for (int k = 0; k < n; k++) {
				if (v[k].str.substr(4, 6) == s) m[v[k].str.substr(1, 3)]++;
			}
			for (auto it : m)ans.push_back({ it.first,it.second });
		}
		sort(ans.begin(), ans.end(), cmp);
		for (int k = 0; k < ans.size(); k++) {
			printf("%s %d\n", ans[k].str.c_str(), ans[k].v);
		}
		if (((num == 1 || num == 3) && ans.size() == 0) || (num == 2 && cnt == 0)) {
			printf("NA\n");
		}
	}
	return 0;
}
