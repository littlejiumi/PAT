#include<iostream>
#include<map>
#include<string>
#include<algorithm>
using namespace std;
const int maxn = 2010;     //注意1000次通话k最多2000人
int n, k;
bool vis[maxn] = { false };
int G[maxn][maxn] = { 0 };
int weight[maxn] = { 0 };
map<string, int> stringToInt;  //字符串与数字序号的转换
map<int,string> intToString;
map<string, int> Gang;
int num = 0;
int change(string str) {
	if (stringToInt.find(str) != stringToInt.end()) {            //map的find函数不用写循环
		return stringToInt[str];
	}
	else {
		stringToInt[str] = num;
		intToString[num] = str;
		return num++;      //录入通话记录时记录人数
	}
}
void DFS(int now,int &head, int &numm, int &totalw) {
	numm++;//每DFS一次，就是组内多了一个人
	vis[now] = true;   //遍历过了
	if (weight[now] > weight[head]) {
		head = now;          //和head比较，选出head
	}
	for (int i = 0; i < num; i++) {
		if (G[now][i] !=0) {
			totalw += G[now][i];                
			G[now][i] = G[i][now]=0;         //算过就删除
			if (vis[i] == false) {         //没遍历的遍历
				DFS(i, head, numm, totalw);
			}
			
		}
	}
}
void DFStrave() {
	for (int i = 0; i < num; i++) {
		if (vis[i] == false) {
			int head = i, numm = 0, totalw = 0;
			DFS(i, head, numm, totalw);
			if (numm > 2 && totalw > k) {
				Gang[intToString[head]] = numm;
			}
		}
	}
}
int main() {
	string str1,str2;
	int w;
	cin >> n >> k;
	for (int i = 0; i < n; i++) {
		cin >> str1 >> str2 >> w;
		int id1 = change(str1);
		int id2 = change(str2);
		weight[id1] += w;
		weight[id2] += w;
		G[id1][id2] += w;
		G[id2][id1] += w;
	}
	DFStrave();
	cout << Gang.size()<<endl;
	map<string, int>::iterator it;        //注意迭代器写法
	for (it = Gang.begin(); it != Gang.end(); it++) {
		cout << it->first << " " << it->second << endl;
	}
	return 0;
}
