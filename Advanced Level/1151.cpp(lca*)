#include <iostream>
#include <vector>
#include <map>
using namespace std;
const int maxn = 10010;
map<int, int> pos;
int pre[maxn], in[maxn];
void lca(int inl, int inr, int preRoot, int a, int b) {   //婉约的建树
	if (inl > inr) return;
	int inRoot = pos[pre[preRoot]], aIn = pos[a], bIn = pos[b];  //找出根节点
	if (aIn < inRoot && bIn < inRoot)
		lca(inl, inRoot - 1, preRoot + 1, a, b);
	else if ((aIn < inRoot && bIn > inRoot) || (aIn > inRoot && bIn < inRoot)) //在此根节点一左一右
		printf("LCA of %d and %d is %d.\n", a, b, in[inRoot]);
	else if (aIn > inRoot && bIn > inRoot)
		lca(inRoot + 1, inr, preRoot + 1 + (inRoot - inl), a, b);
	else if (aIn == inRoot)
		printf("%d is an ancestor of %d.\n", a, b);
	else if (bIn == inRoot)
		printf("%d is an ancestor of %d.\n", b, a);
}
int main() {
	int m, n, a, b;
	scanf("%d %d", &m, &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &in[i]);
		pos[in[i]] = i;   //按中序排个序号
	}
	for (int i = 1; i <= n; i++) scanf("%d", &pre[i]);
	for (int i = 0; i < m; i++) {
		scanf("%d %d", &a, &b);
		if (pos[a] == 0 && pos[b] == 0)//序号为0 说明不在树里
			printf("ERROR: %d and %d are not found.\n", a, b);
		else if (pos[a] == 0 || pos[b] == 0)
			printf("ERROR: %d is not found.\n", pos[a] == 0 ? a : b);//注意这种简洁写法
		else
			lca(1, n, 1, a, b); //最低公共结点
	}
	return 0;
}
