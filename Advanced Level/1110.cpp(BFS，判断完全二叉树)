#include<cstdio>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int maxn = 24;
bool isRoot[maxn];  // 结点是否是根结点
struct node {
	int lchild, rchild;
}Node[maxn];
int charToNum(char c[]) {
	if (c[0] == '-') {
		return -1;
	}
	else if (strlen(c) != 1) {
		return (c[0] - '0') * 10 + c[1] - '0';
	}
	else {
		return c[0] - '0';
	}
}
int findRoot(int n) {
	for (int i = 0; i < n; i++) {
		if (isRoot[i]) {     // isRoot为true时直接返回根结点编号i
			return i;
		}
	}
}
bool flag = true, ans = true;
int last;
void BFS(int root) {
	queue<int> q;
	q.push(root);
	while (!q.empty()) {
		int front = q.front();
		last = front;
		q.pop();
		if (Node[front].lchild != -1) {     //有结点
			q.push(Node[front].lchild);
			if (flag == false) {          //前面有空缺
				ans = false;
			}
		}
		else {
			flag = false;   //出现空缺
		}
		if (Node[front].rchild != -1) {
			q.push(Node[front].rchild);
			if (flag == false) {
				ans = false;
			}
		}
		else {
			flag = false;
		}
	}
}
int main() {
	int n;
	char l[3];
	char r[3];
	scanf("%d", &n);
	memset(isRoot, true, sizeof(isRoot));       //初始化所有结点都是根结点
	for (int i = 0; i < n; i++) {
		scanf("%s %s", l, r);
		Node[i].lchild = charToNum(l);
		Node[i].rchild = charToNum(r);
		isRoot[Node[i].lchild] = false;
		isRoot[Node[i].rchild] = false;
	}
	

	int root = findRoot(n);
	BFS(root);
	if (ans == true) {
		printf("YES ");
		printf("%d", last);
	}
	else {
		printf("NO ");
		printf("%d", root);
	}

	return 0;
}


#include<iostream>
#include<string>
#include<queue>
using namespace std;
const int maxn = 1010;
struct Node {
	int lchild, rchild;
}node[maxn];
int have[maxn] = { 0 };
int c = 0,last = -1;
void BFS(int root) {

	queue<int> q;
	q.push(root);
	while (!q.empty()) {
		int front = q.front();
		q.pop();

		if (front != -1) {
			last = front;
			c++;
		}
		if (front == -1) {
			break;
		}
		q.push(node[front].lchild);
		q.push(node[front].rchild);
	}
}
int main() {
	int n;
	scanf("%d", &n);
	string l, r;
	for (int i = 0; i < n; i++) {
		cin >> l >> r;
		if (l == "-") {
			node[i].lchild = -1;
		}
		else {
			node[i].lchild = stoi(l);
			have[stoi(l)] = 1;
		}
		if (r == "-") {
			node[i].rchild = -1;
		}
		else {
			node[i].rchild = stoi(r);
			have[stoi(r)] = 1;
		}
	}
	int root = 0;
	while (have[root] == 1)root++;

	BFS(root);
	if (c == n) {
		printf("YES ");
		printf("%d\n", last);
	}
	else {
		printf("NO ");
		printf("%d\n", root);
	}

	return 0;
}
