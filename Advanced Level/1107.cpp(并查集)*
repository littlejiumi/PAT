#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn = 1010;
int c[maxn] = { 0 };     //记录任何一个喜欢cid活动人的编号，这个社交网络根节点就是findFather(c[cid])
int isRoot[maxn] = { 0 };
int father[maxn];
//套路
int findFather(int x) {
	while (x != father[x]) {
		x = father[x];
	}
	return x;
}
void Union(int a, int b) {
	int faA = findFather(a);
	int faB = findFather(b);
	if (faA != faB) {
		father[faA] = faB;
	}
}
void init(int n) {       //初始化
	for (int i = 1; i <= n; i++) {
		father[i] = i;           //自己是自己的父节点
		isRoot[i] = false;       //都不是根节点
	}
}
bool cmp(int a, int b) {
	return a > b;
}
int main() {
	int n,k,cid;
	scanf("%d", &n);
	init(n);
	for (int i = 1; i <= n; i++) {
		scanf("%d:", &k);
		for (int j = 0; j < k; j++) {
			scanf("%d", &cid);
			if (c[cid] == 0) {
				c[cid] = i;
			}
			Union(i, findFather(c[cid]));
		}
	}
	for (int i = 1; i <= n; i++) {
		isRoot[findFather(i)]++;       //记录每个网络多少人
	}
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		if (isRoot[i] != 0) {
			ans++;
		}
	}
	printf("%d\n", ans);
	sort(isRoot + 1, isRoot + 1 + n, cmp);
	for (int i = 1; i <= ans; i++) {
		printf("%d", isRoot[i]);
		if (i < ans)printf(" ");
	}
	return 0;
}
